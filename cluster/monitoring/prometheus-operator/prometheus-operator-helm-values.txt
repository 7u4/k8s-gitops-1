alertmanager:
  ingress:
    hosts: [prom-alert.$DOMAIN]
    tls:
    - hosts:
      - prom-alert.$DOMAIN
    annotations:
      #nginx.ingress.kubernetes.io/auth-url: "https://auth.$DOMAIN/oauth2/auth"
      #nginx.ingress.kubernetes.io/auth-signin: "https://auth.$DOMAIN/oauth2/start"
prometheus:
  ingress:
    hosts: [prom-server.$DOMAIN]
    tls:
    - hosts:
      - prom-server.$DOMAIN
    annotations:
      #nginx.ingress.kubernetes.io/auth-url: "https://auth.$DOMAIN/oauth2/auth"
      #nginx.ingress.kubernetes.io/auth-signin: https://auth.$DOMAIN/oauth2/start
  prometheusSpec:
    additionalScrapeConfigs:
      - job_name: "netdata-scrape"
        metrics_path: "/api/v1/allmetrics"
        params:
          # format: prometheus | prometheus_all_hosts
          # You can use `prometheus_all_hosts` if you want Prometheus to set the `instance` to your hostname instead of IP
          format: [prometheus]
        honor_labels: true
        static_configs:
          - targets:
              - r610-0.$DOMAIN:19999
              - r610-1.$DOMAIN:19999
              - r610-2.$DOMAIN:19999
              - r720-0.$DOMAIN:19999
              - n2-0.$DOMAIN:19999
              - h2-0.$DOMAIN:19999
              - fw.$DOMAIN:19999
    #- job_name: 'home-assistant'
    #  scrape_interval: 60s
    #  metrics_path: '/api/prometheus'
    #  bearer_token: '$PROM_HASS_TOKEN'
    #  scheme: http
    #  static_configs:
    #  - targets:
    #    - home-assistant.default.svc:8123
      - job_name: stash-pushgateway
        scrape_interval: 30s
        scrape_timeout: 10s
        metrics_path: /metrics
        scheme: http
        honor_labels: true
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_label_app]
          regex: stash # default label for stash-operator service is "app: stash". customize this field according to label of stash-operator service of your setup.
          action: keep
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          regex: true
          action: keep
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          regex: pushgateway
          action: keep
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_pushgateway_path]
          regex: (.+)
          target_label: __metrics_path__
          action: replace
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_pushgateway_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_pushgateway_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - source_labels: [__meta_kubernetes_namespace]
          separator: ;
          regex: (.*)
          target_label: namespace
          replacement: $1
          action: replace
        - source_labels: [__meta_kubernetes_service_name]
          separator: ;
          regex: (.*)
          target_label: service
          replacement: $1
          action: replace
      - job_name: stash-operator
        scrape_interval: 30s
        scrape_timeout: 10s
        metrics_path: /metrics
        scheme: https
        kubernetes_sd_configs:
        - role: endpoints
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        tls_config:
          ca_file: /etc/prometheus/secret/stash-apiserver-cert/tls.crt
          server_name: stash-operator.kube-system.svc
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_label_app]
          regex: stash # default label for stash-operator service is "app: stash". customize this field according to label of stash-operator service of your setup.
          action: keep
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          regex: true
          action: keep
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          regex: api
          action: keep
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_operator_path]
          regex: (.+)
          target_label: __metrics_path__
          action: replace
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_operator_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_operator_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - source_labels: [__meta_kubernetes_namespace]
          separator: ;
          regex: (.*)
          target_label: namespace
          replacement: $1
          action: replace
        - source_labels: [__meta_kubernetes_service_name]
          separator: ;
          regex: (.*)
          target_label: service
          replacement: $1
          action: replace
grafana:
  ingress:
    hosts: [grafana.$DOMAIN]
    tls:
    - hosts:
      - grafana.$DOMAIN
  adminPassword: "$GRAFANA_PASSWORD"
  grafana.ini:
    server:
      root_url: https://grafana.${DOMAIN}
    auth.basic:
      disable_login_form: false
    auth.generic_oauth:
      enabled: false
      allow_sign_up: true
      team_ids:
      allowed_organizations:
      name: Auth0
      client_id: $AUTH0_GRAFANA_CLIENT_ID
      client_secret: $AUTH0_GRAFANA_CLIENT_SECRET
      scopes: openid profile email
      auth_url: https://${AUTH0_DOMAIN}.auth0.com/authorize
      token_url: https://${AUTH0_DOMAIN}.auth0.com/oauth/token
      api_url: https://${AUTH0_DOMAIN}.auth0.com/userinfo
